
----------------------------------
ADVANCED CSS/JS AGGREGATION MODULE
----------------------------------


CONTENTS OF THIS FILE
---------------------

 * Features & benefits
 * Configuration
 * JavaScript Bookmarklet
 * Technical Details & Hooks
 * nginx Configuration


FEATURES & BENEFITS
-------------------

Advanced CSS/JS Aggregation Core Module:
 * On demand generation of CSS/JS Aggregates. If the file doesn't exist it will
   be generated on demand.
 * Stampede protection for CSS and JS aggregation. Uses locking so multiple
   requests for the same thing will result in only one thread doing the work.
 * Fully cached CSS/JS assets allow for zero file I/O if the Aggregated file
   already exists. Results in better page generation performance.
 * Smarter aggregate deletion. CSS/JS aggregates only get removed from the
   folder if they have not been used/accessed in the last 30 days.
 * Smarter cache flushing. Scans all CSS/JS files that have been added to any
   aggregate; if that file has changed then flush the correct caches so the
   changes go out. The new name ensures changes go out when using CDNs.
 * Footer JS gets aggregated as well.
 * One can add JS to any region of the theme & have it aggregated.
 * Url query string to turn off aggregation for that request. ?advagg=0 will
   turn off file aggregation if the user has the "bypass advanced aggregation"
   permission. ?advagg=-1 will completely bypass all of Advanced CSS/JS
   Aggregations modules and submodules.
 * Button on the admin page for dropping a cookie that will turn off file
   aggregation. Useful for theme development.
 * Gzip support. All aggregated files can be pre-compressed into a .gz file and
   served from Apache. This is faster then gzipping the file on each request.

Advanced CSS/JS Aggregation Submodules:
 * None at this time.


CONFIGURATION
-------------

Settings page is located at:
admin/settings/advagg
 * Enable Advanced Aggregation. You can disable the module here; same effect as
   placing ?advagg=-1 in the URL.
 * Create .gz files. For every Aggregated file generated, this will create a
   gzip version of that and then serve that out if the browser accepts gzip
   compression.
 * Use Cores Grouping Logic. Will group files just like core does.
 * Smart cache flush button. Scan all files referenced in aggregated files. If
   any of them have changed, increment the counters containing that file and
   rebuild the bundle.
   * Remove all stale files. Scan all files in the advagg_css/js directories and
     remove the ones that have not been accessed in the last 30 days.
 * Aggregation Bypass Cookie. This will set or remove a cookie that disables
   aggregation for the remainder of the browser session. It acts almost the same
   as adding ?advagg=0 to every URL.
 * Drastic Measures.
   * Clear all caches. Remove all data stored in the advagg cache bins.
   * Remove all generated files. Remove all files in the advagg_css/js
     directories.
   * Increment Global Counter. Force the creation of all new aggregates by
     incrementing a global counter

Additional information is available at:
admin/settings/advagg/info
 * Hook Theme Info. Displays the process_html order. Used for debugging.
 * CSS files. Displays how often a file has changed.
 * JS files. Displays how often a file has changed.
 * Modules implementing advagg hooks. Lets you know what modules are using
   advagg.
 * Hooks And Variables Used In Hash. Show what is used to calculate the 3rd hash
   of an aggregates filename.


JAVASCRIPT BOOKMARKLET
----------------------

You can use this JS code as a bookmarklet for toggling the AdvAgg URL parameter.
See http://en.wikipedia.org/wiki/Bookmarklet for more details.

    javascript:(function(){var loc = document.location.href,qs = document.location.search,regex_off = /\&?advagg=-1/,goto = loc;if(qs.match(regex_off)) {goto = loc.replace(regex_off, '');} else {qs = qs ? qs + '&advagg=-1' : '?advagg=-1';goto = document.location.pathname + qs;}window.location = goto;})();


TECHNICAL DETAILS & HOOKS
-------------------------

Technical Details:
 * There are three database tables and two cache table used by advagg.
   advagg_schema documents what they are used for.
 * Files are generated by this pattern:

    css__[BASE64_HASH]__[BASE64_HASH]__[BASE64_HASH].css

   The first base64 hash value tells us what files are included in the
   aggregate. Changing what files get included will change this value.

   The second base64 hash value is used as a sort of version control; it changes
   if any of the base files contents have changed. Changing a base files content
   (like drupal.js) will change this value.

   The third base64 hash value records what settings were used when generating
   the aggregate. Changing a setting that affects how aggregates get built
   (like toggling "Create .gz files") will change this value.

Hooks:

Modify file contents.
 * advagg_get_css_file_contents_alter. Modify the data of each file before it
   gets glued together into the bigger aggregate. Useful for minification.
 * advagg_get_js_file_contents_alter. Modify the data of each file before it
   gets glued together into the bigger aggregate. Useful for minification.
 * advagg_get_css_aggregate_contents_alter. Modify the data of the complete
   aggregate before it gets written to a file. Useful for minification.
 * advagg_get_js_aggregate_contents_alter. Modify the data of the complete
   aggregate before it gets written to a file.Useful for minification.
 * advagg_save_aggregate. Modify the data of the complete aggregate allowing one
   create multiple files from one base file. Useful for gzip compression.

Modify file names and aggregate bundles.
 * advagg_get_hooks_hash_alter. Add in your own settings and hooks allowing one
   to modify the 3rd base64 hash in a filename.
 * advagg_build_aggregate_plans_alter. Regroup files into different aggregates.

Others.
 * advagg_hooks_implemented_alter. Tell advagg about other hooks related to
   advagg.


NGINX CONFIGURATION
-------------------

http://drupal.org/node/1116618

    ###
    ### advagg_css and advagg_js support
    ###
    location ~* files/advagg_(?:css|js)/ {
      access_log off;
      expires    max;
      add_header ETag "";
      add_header Cache-Control "max-age=290304000, no-transform, public";
      add_header Last-Modified "Wed, 20 Jan 1988 04:20:42 GMT";
      try_files  $uri @drupal;
    }
