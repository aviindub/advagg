<?php

/**
 * @file
 * Advanced aggregation modifier module.
 */

// Define default variables.
/**
 * Default value to move all JS to the footer.
 */
define('ADVAGG_MOD_JS_FOOTER', FALSE);

/**
 * Default value to turn on preprocessing for all JavaScript files.
 */
define('ADVAGG_MOD_JS_PREPROCESS', FALSE);

/**
 * Default value to add the defer tag to all script tags.
 */
define('ADVAGG_MOD_JS_DEFER', FALSE);

/**
 * Default value to turn on preprocessing for all CSS files.
 */
define('ADVAGG_MOD_CSS_PREPROCESS', FALSE);

// Core hook implementations.
/**
 * Implement hook_menu.
 */
function advagg_mod_menu() {
  $items = array();
  $file_path = drupal_get_path('module', 'advagg_mod');

  $items['admin/config/development/advagg/mod'] = array(
    'title' => 'Modifications',
    'description' => 'Turn on or off various mods for CSS/JS.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advagg_mod_admin_settings_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'file path' => $file_path,
    'file' => 'advagg_mod.admin.inc',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_js_alter().
 */
function advagg_mod_js_alter(&$js) {
  // Move all JS to the footer.
  if (variable_get('advagg_mod_js_footer', ADVAGG_MOD_JS_FOOTER)) {
    foreach ($js as $name => &$values) {
      $values['scope'] = 'footer';
    }
  }

  // Do not use preprocessing if JS is inlined.
  // Do not use defer if JS is inlined.
  if (advagg_mod_inline_page()) {
    advagg_mod_inline_js($js);
    return;
  }

  // Force all JS to be preprocessed.
  if (variable_get('advagg_mod_js_preprocess', ADVAGG_MOD_JS_PREPROCESS)) {
    foreach ($js as $name => &$values) {
      $values['preprocess'] = TRUE;
    }
  }

  // Add the defer tag to all JS.
  if (variable_get('advagg_mod_js_defer', ADVAGG_MOD_JS_DEFER)) {
    foreach ($js as $name => &$values) {
      // Everything is defer.
      $values['defer'] = TRUE;

      if (strpos($name, 'jquery.js') !== FALSE || strpos($name, 'jquery.min.js') !== FALSE ) {
        // Do not defer the loading of jquery.js
        $values['defer'] = FALSE;

        // jquery_update fallback.
        if (module_exists('jquery_update')) {
          $values['onload'] = "if (typeof window.init_drupal_jquery_update_fallback === 'function') {init_drupal_jquery_update_fallback();}";
        }
      }
      if (strpos($name, 'jquery-ui.js') !== FALSE || strpos($name, 'jquery-ui.min.js') !== FALSE ) {
        // Do not defer the loading of jquery-ui.js
        $values['defer'] = FALSE;

        // jquery_update fallback.
        if (module_exists('jquery_update')) {
          $values['onload'] = "if (typeof window.init_drupal_jquery_ui_update_fallback === 'function') {init_drupal_jquery_ui_update_fallback();}";
        }
      }

      // Drupal settings.
      if ($name == 'misc/drupal.js') {
        $values['onload'] = "if (typeof window.init_drupal_core_settings === 'function') {init_drupal_core_settings();}";
      }

    }
  }
}

/**
 * Implements hook_css_alter().
 */
function advagg_mod_css_alter(&$css) {
  // Do not use preprocessing if CSS is inlined.
  if (advagg_mod_inline_page()) {
    advagg_mod_inline_css($css);
    return;
  }

  // Force all CSS to be preprocessed.
  if (variable_get('advagg_mod_css_preprocess', ADVAGG_MOD_CSS_PREPROCESS)) {
    foreach ($css as $name => &$values) {
      $values['preprocess'] = TRUE;
    }
  }
}

// AdvAgg hook implementations.
/**
 * Implements hook_advagg_modify_js_pre_render_alter().
 */
function advagg_mod_advagg_modify_js_pre_render_alter(&$children, &$elements) {
  // Do not use defer if JS is inlined.
  if (advagg_mod_inline_page()) {
    return;
  }

  if (variable_get('advagg_mod_js_defer', ADVAGG_MOD_JS_DEFER)) {
    foreach ($children as &$values) {
      $values['#attributes']['defer'] = TRUE;
      if (empty($values['#value'])) {
        continue;
      }

      // Workaround bug with onload and jquery update.
      if (!empty($values['#attributes']['onload'])) {
        unset($values['#attributes']['onload']);
      }

      // Core
      if (strpos($values['#value'], 'jQuery.extend(Drupal.settings') !== FALSE) {
        $values['#value'] = 'function init_drupal_core_settings() {' . $values['#value'] . '}';
      }

      // jQuery Update
      if (strpos($values['#value'], 'window.jQuery') !== FALSE) {
        $values['#value'] = 'function init_drupal_jquery_update_fallback() {' . $values['#value'] . '}';
      }
      if (strpos($values['#value'], 'window.jQuery.ui') !== FALSE) {
        $values['#value'] = 'function init_drupal_jquery_ui_update_fallback() {' . $values['#value'] . '}';
      }
    }
  }
}

/**
 * Returns TRUE if this page should have inline CSS/JS.
 */
function advagg_mod_inline_page() {
  $visibility = variable_get('advagg_mod_inline_visibility', BLOCK_VISIBILITY_LISTED);
  $pages = variable_get('advagg_mod_inline_pages', '');
  return advagg_mod_match_path($pages, $visibility);
}

/**
 * Transforms all JS files into inline JS.
 *
 * @param $js
 *   JS array.
 */
function advagg_mod_inline_js(&$js) {
  $aggregate_settings = advagg_current_hooks_hash_array();

  foreach ($js as $name => &$values) {
    // Only process files.
    if ($values['type'] != 'file') {
      continue;
    }
    $filename = $values['data'];
    if (file_exists($filename)) {
      $contents = file_get_contents($filename);
    }
    // Allow other modules to modify this files contents.
    // Call hook_advagg_get_js_file_contents_alter().
    drupal_alter('advagg_get_js_file_contents', $contents, $filename, $aggregate_settings);

    $values['data'] = $contents;
    $values['type'] = 'inline';
  }
}

/**
 * Transforms all CSS files into inline CSS.
 *
 * @param $css
 *   CSS array.
 *
 * @see advagg_get_css_aggregate_contents()
 * @see drupal_build_css_cache()
 */
function advagg_mod_inline_css(&$css) {
  $aggregate_settings = advagg_current_hooks_hash_array();
  $optimize = TRUE;
  foreach ($css as $name => &$values) {
    // Only process files.
    if ($values['type'] != 'file') {
      continue;
    }

    $file = $values['data'];
    if (file_exists($file)) {
      $contents = drupal_load_stylesheet($file, $optimize);

      // Build the base URL of this CSS file: start with the full URL.
      $css_base_url = file_create_url($file);
      // Move to the parent.
      $css_base_url = substr($css_base_url, 0, strrpos($css_base_url, '/'));
      // Simplify to a relative URL if the stylesheet URL starts with the
      // base URL of the website.
      if (substr($css_base_url, 0, strlen($GLOBALS['base_root'])) == $GLOBALS['base_root']) {
        $css_base_url = substr($css_base_url, strlen($GLOBALS['base_root']));
      }

      _drupal_build_css_path(NULL, $css_base_url . '/');
      // Anchor all paths in the CSS with its base URL, ignoring external and absolute paths.
      $contents = preg_replace_callback('/url\(\s*[\'"]?(?![a-z]+:|\/+)([^\'")]+)[\'"]?\s*\)/i', '_drupal_build_css_path', $contents);

      // Allow other modules to modify this files contents.
      // Call hook_advagg_get_css_file_contents_alter().
      drupal_alter('advagg_get_css_file_contents', $contents, $file, $aggregate_settings);

      // Per the W3C specification at http://www.w3.org/TR/REC-CSS2/cascade.html#at-import,
      // @import rules must proceed any other style, so we move those to the top.
      $regexp = '/@import[^;]+;/i';
      preg_match_all($regexp, $contents, $matches);
      $contents = preg_replace($regexp, '', $contents);
      $contents = implode('', $matches[0]) . $contents;

      $values['data'] = $contents;
      $values['type'] = 'inline';
    }
  }
}

/**
 * Transforms all CSS files into inline CSS.
 *
 * @param $pages
 *   string from the advagg_mod_inline_pages variable.
 * @param $visibility
 *   visibility setting from the advagg_mod_inline_visibility variable.
 *
 * @see block_block_list_alter()
 */
function advagg_mod_match_path($pages, $visibility) {
  // Limited visibility blocks must list at least one page.
  if ($visibility == BLOCK_VISIBILITY_LISTED && empty($pages)) {
    $page_match = FALSE;
  }
  elseif ($pages) {
    // Match path if necessary.
    // Convert path to lowercase. This allows comparison of the same path
    // with different case. Ex: /Page, /page, /PAGE.
    $pages = drupal_strtolower($pages);
    if ($visibility < BLOCK_VISIBILITY_PHP) {
      // Convert the Drupal path to lowercase
      $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
      // Compare the lowercase internal and lowercase path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
      }
      // When $visibility has a value of 0 (BLOCK_VISIBILITY_NOTLISTED),
      // the block is displayed on all pages except those listed in $pages.
      // When set to 1 (BLOCK_VISIBILITY_LISTED), it is displayed only on those
      // pages listed in $block->pages.
      $page_match = !($visibility xor $page_match);
    }
    elseif (module_exists('php')) {
      $page_match = php_eval($pages);
    }
    else {
      $page_match = FALSE;
    }
  }
  else {
    $page_match = TRUE;
  }

  return $page_match;
}
