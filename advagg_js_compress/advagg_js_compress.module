<?php

/**
 * @file
 * Advanced CSS/JS aggregation js compression module.
 *
 */

/**
 * Default value to see if the callback is working.
 */
define('ADVAGG_JS_COMPRESS_CALLBACK', FALSE);

/**
 * Implementation of hook_menu
 */
function advagg_js_compress_menu() {
  $items = array();

  $items['advagg_js_compress_test_file.php'] = array(
    'page callback' => 'advagg_js_compress_test_file',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implement hook_init.
 */
function advagg_js_compress_init() {
  global $conf;
  // Do not use the minified jquery if we are going to compress.
  $conf['jquery_update_compression_type'] = 'none';
}

/**
 * Implement hook_advagg_files_table.
 */
function advagg_js_compress_advagg_files_table($row, $checksum) {
  // IF the file has changed, test it's compressibility.
  if ($row['filetype'] = 'js' && $checksum != $row['checksum']) {
    $files_to_test[] = array(
      'md5' => $row['filename'],
      'filename' => $row['filename_md5'],
    );
    advagg_js_compress_test_compression($files_to_test);
  }
}

/**
 * Implement hook_advagg_js_pre_alter.
 */
function advagg_js_compress_advagg_js_pre_alter(&$javascript) {
  if (module_exists('jquery_update')) {
    return;
  }

  foreach ($javascript as $type => $data) {
    if (!$data) {
      continue;
    }
    if ($type == 'setting' || $type == 'inline') {
      continue;
    }
    foreach ($data as $path => $info) {
      if ($path == 'misc/jquery.form.js') {
        $new_path = drupal_get_path('module', 'advagg_js_compress') . '/jquery.form.js';
        $javascript[$type][$new_path] = $info;
        unset($javascript[$type][$path]);
      }
    }
  }
}

/**
 * Implement hook_advagg_js_alter.
 */
function advagg_js_compress_advagg_js_alter(&$contents, $files, $bundle_md5) {
  global $base_path;

  // Make sure every file in this aggregate is compressible.
  $files_to_test = array();
  $all_ok = TRUE;
  $advagg_js_compress_callback = variable_get('advagg_js_compress_callback', ADVAGG_JS_COMPRESS_CALLBACK);
  if ($advagg_js_compress_callback) {
    foreach ($files as $filename) {
      $filename_md5 = md5($filename);
      $data = advagg_get_file_data($filename_md5);

      // File needs to be tested.
      if (empty($data['advagg_js_compress']['tested'])) {
        $files_to_test[] = array(
          'md5' => $filename_md5,
          'filename' => $filename,
        );
      }
      elseif ($data['advagg_js_compress']['tested']['jsminplus'] == -1) {
        $all_ok = FALSE;
      }
    }

    // Send test files to worker.
    if (!empty($files_to_test)) {
      $compressible = advagg_js_compress_test_compression($files_to_test);
      // If an array then it is a list of files that can not be compressed.
      if (is_array($compressible)) {
        $contents = '';
        // Place filename in an array key.
        $list_bad = array();
        foreach ($compressible as $file) {
          $file = $file['filename'];
          $list_bad[$file] = $file;
        }

        // Do not compress the file that it bombs on.
        $list_good = array();
        foreach ($files as $file) {
          if (!empty($list_bad[$file])) {
            $data = advagg_build_js_bundle($list_good);
            advagg_js_compress_jsminplus($data);
            $data .= ";\n" . advagg_build_js_bundle(array($file));
            $contents .= $data;
            $list_good = array();
          }
          else {
            $list_good[] = $file;
          }
        }
        if (!empty($list_good)) {
          $data = advagg_build_js_bundle($list_good);
          advagg_js_compress_jsminplus($data);
          $contents .= $data;
        }
        $all_ok = FALSE;
      }
    }
  }

  // Only compress if all files are compressible.
  if ($all_ok) {
    advagg_js_compress_jsminplus($contents);
  }
}

/**
 * Compress a JS string using jsmin+
 *
 * @param $contents
 *   Javascript string.
 */
function advagg_js_compress_jsminplus(&$contents) {
  // JSMin+ the contents of the aggregated file.
  require_once(drupal_get_path('module', 'advagg_js_compress') .'/jsminplus.php');
  // Strip Byte Order Marks (BOM's) from the file, JSMin+ cannot parse these.
  $contents = str_replace(pack("CCC", 0xef, 0xbb, 0xbf), "", $contents);
  $contents = JSMinPlus::minify($contents);
}

/**
 * Run various theme functions so the cache is primed.
 *
 * @param $files_to_test
 *   array with md5 and filename.
 * @return
 *   TRUE if all files are compressible. List of files that failed otherwise.
 */
function advagg_js_compress_test_compression($files_to_test) {
  global $base_path;
  $bad_files = array();
  foreach ($files_to_test as $info) {
    $key = variable_get('advagg_js_compress_url_key', FALSE);
    if (empty($key)) {
      $key = mt_rand();
      variable_set('advagg_js_compress_url_key', $key);
    }

    // Setup request URL and headers.
    $query['values'] = $info;
    $query['key'] = $key;
    $query_string = http_build_query($query, '', '&');
    $ip = variable_get('advagg_server_addr', FALSE);
    if (empty($ip)) {
      $ip = $_SERVER['SERVER_ADDR'];
    }
    $url = 'http://' . $ip . $base_path . 'advagg_js_compress_test_file.php';
    $headers = array(
      'Host' => $_SERVER['HTTP_HOST'],
      'Content-Type' => 'application/x-www-form-urlencoded',
    );

    $results = drupal_http_request($url, $headers, 'POST', $query_string);
    $data = advagg_get_file_data($info['md5']);
    if ($results->data == $info['md5']) {
      $data['advagg_js_compress']['tested']['jsminplus'] = 1;
    }
    else {
      $data['advagg_js_compress']['tested']['jsminplus'] = -1;
      $bad_files[] = $info;
    }
    advagg_set_file_data($info['md5'], $data);
  }
  if (empty($bad_files)) {
    return TRUE;
  }
  return $bad_files;
}

/**
 * Run various theme functions so the cache is primed.
 *
 * @param $values
 *   object File info
 */
function advagg_js_compress_test_file($values = NULL) {
//   watchdog('debug', str_replace('    ', '&nbsp;&nbsp;&nbsp;&nbsp;', nl2br(htmlentities(print_r($values, TRUE) . print_r($_REQUEST, TRUE)))));

  // Exit if key does not match & called with $file not set.
  if (is_null($values)) {
    if (empty($_POST['key']) || empty($_POST['values'])) {
      return;
    }
    $key = variable_get('advagg_js_compress_url_key', FALSE);
    if ($key != $_POST['key']) {
      return;
    }
    $values = array();
    $values['values'] = $_POST['values'];
  }

  // JSMin+ the contents of the aggregated file.
  require_once(drupal_get_path('module', 'advagg_js_compress') .'/jsminplus.php');
  $contents = file_get_contents($values['values']['filename']);
  // Strip Byte Order Marks (BOM's) from the file, JSMin+ cannot parse these.
  $contents = str_replace(pack("CCC", 0xef, 0xbb, 0xbf), "", $contents);
  $contents = JSMinPlus::minify($contents);

  echo $values['values']['md5'];
  exit;
}
