<?php

/**
 * @file
 * Handles Advanced Aggregation installation and upgrade tasks.
 */

/**
 * Implementation of hook_enable().
 */
function advagg_enable() {
  // Rescan files
  register_shutdown_function('advagg_flush_caches');

  // Check for fast404
  register_shutdown_function('advagg_check_missing_handler');
}

/**
 * Implementation of hook_disable().
 */
function advagg_disable() {
  cache_clear_all('*', 'cache_advagg', TRUE);
}

/**
 * Implementation of hook_install().
 */
function advagg_install() {
  drupal_install_schema('advagg');

  // Make sure we run last.
  db_query("UPDATE {system} SET weight = 250 WHERE name = 'advagg'");
}

/**
 * Implementation of hook_uninstall().
 */
function advagg_uninstall() {
  // Remove database tables.
  cache_clear_all('*', 'cache_advagg', TRUE);
  drupal_uninstall_schema('advagg');

  // Remove variables.
  variable_del('advagg_enabled');
  variable_del('advagg_stale_file_threshold');
  variable_del('advagg_stale_file_last_used_threshold');
  variable_del('advagg_file_last_used_interval');
  variable_del('advagg_gzip_compression');
  variable_del('advagg_async_generation');
  variable_del('advagg_socket_timeout');
  variable_del('advagg_server_addr');
  variable_del('advagg_debug');

  // Remove files.
  $path = file_create_path('advagg_js');
  file_scan_directory($path, '.*', array('.', '..', 'CVS'), 'file_delete', TRUE);
  @unlink($path);
  $path = file_create_path('advagg_css');
  file_scan_directory($path, '.*', array('.', '..', 'CVS'), 'file_delete', TRUE);
  @unlink($path);
}

/**
 * Implementation of hook_requirements().
 */
function advagg_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  // Report Drupal version
  if ($phase == 'runtime') {
    if (variable_get('preprocess_css', FALSE) || variable_get('preprocess_js', FALSE)) {
      $requirements['advagg_core_off'] = array(
        'title' => $t('Adv CSS/JS Agg - Core Variables'),
        'severity' => REQUIREMENT_ERROR,
        'value' => $t('Cores CSS and/or JS aggregation should be turned off.'),
      );
    }
    if (variable_get('advagg_enabled', ADVAGG_ENABLED) == FALSE) {
      $requirements['advagg_not_on'] = array(
        'title' => $t('Adv CSS/JS Agg - Enabled'),
        'severity' => REQUIREMENT_WARNING,
        'value' => $t('Advanced CSS/JS aggregation is not currently enabled.'),
      );
    }
    if (module_exists('css_gzip')) {
      $requirements['advagg_css_gzip'] = array(
        'title' => $t('Adv CSS/JS Agg - CSS Gzip'),
        'severity' => REQUIREMENT_WARNING,
        'value' => $t('The CSS Gzip module is no longer used.'),
      );
    }
    if (module_exists('csstidy')) {
      $requirements['advagg_csstidy'] = array(
        'title' => $t('Adv CSS/JS Agg - CSS Tidy'),
        'severity' => REQUIREMENT_WARNING,
        'value' => $t('The CSS Tidy module is no longer used.'),
      );
    }
    if (module_exists('javascript_aggregator')) {
      $requirements['advagg_javascript_aggregator'] = array(
        'title' => $t('Adv CSS/JS Agg - Javascript Aggregator'),
        'severity' => REQUIREMENT_WARNING,
        'value' => $t('The Javascript Aggregator module is no longer used.'),
      );
    }
    if (module_exists('unlimited_css')) {
      $requirements['advagg_unlimited_css'] = array(
        'title' => $t('Adv CSS/JS Agg - IE Unlimited CSS Loader'),
        'severity' => REQUIREMENT_WARNING,
        'value' => $t('The IE Unlimited CSS Loader module is no longer used.'),
      );
    }
    if (module_exists('ie_css_optimizer')) {
      $requirements['advagg_unlimited_css'] = array(
        'title' => $t('Adv CSS/JS Agg - IE CSS Optimizer'),
        'severity' => REQUIREMENT_WARNING,
        'value' => $t('The IE CSS Optimizer module is no longer used.'),
      );
    }
    if (module_exists('cmscdn')) {
      $requirements['advagg_cmscdn'] = array(
        'title' => $t('Adv CSS/JS Agg - CMS CDN'),
        'severity' => REQUIREMENT_WARNING,
        'value' => $t('The CMS CDN module is no longer used.'),
      );
    }
    if (module_exists('bundlecache')) {
      $requirements['advagg_bundlecache'] = array(
        'title' => $t('Adv CSS/JS Agg - BundleCache'),
        'severity' => REQUIREMENT_WARNING,
        'value' => $t('The BundleCache module is no longer used.'),
      );
    }
    init_theme();
    $hooks = theme_get_registry();
    $function = array_pop($hooks['page']['preprocess functions']);
    if (module_exists('labjs')) {
      $function = array_pop($hooks['page']['preprocess functions']);
    }
    if ($function != 'advagg_processor') {
      $requirements['advagg_theme'] = array(
        'title' => $t('Adv CSS/JS Agg - Theme Hook'),
        'severity' => REQUIREMENT_ERROR,
        'value' => $t('Theme hook is not in place. Flush theme cache.'),
      );
    }
    $requirements += advagg_check_missing_handler();

  }

  return $requirements;
}

/**
 * Check to see if the CSS/JS generator is working.
 */
function advagg_check_missing_handler() {
  global $base_path;
  $ret = array();
  // Ensure translations don't break at install time
  $t = get_t();

  // Setup request
  $css_path = file_create_path('advagg_css');
  $ip = $_SERVER['SERVER_ADDR'];
  $filepath = $css_path . '/css_missing' . mt_rand() . '_0.css';
  $url = 'http://' . $ip . $base_path . $filepath;
  $headers = array(
    'Host' => $_SERVER['HTTP_HOST'],
  );

  // Send request and also time it.
  timer_start(__FUNCTION__ . 'local');
  $data_local = drupal_http_request($url, $headers);
  $time_local = timer_stop(__FUNCTION__ . 'local');

  if (module_exists('cdn')) {
    $url_cdn = file_create_url($filepath);
    // Send request and also time it.
    timer_start(__FUNCTION__ . 'cdn');
    $data_cdn = drupal_http_request($url_cdn);
    $time_cdn = timer_stop(__FUNCTION__ . 'cdn');
    $mode = variable_get(CDN_MODE_VARIABLE, CDN_MODE_BASIC);
  }

  // Check response and set async variable accordingly.
  if (isset($data_cdn)) {
    if ($data_cdn->code == 404 && !empty($data_cdn->headers['X-AdvAgg']) && $mode == CDN_MODE_BASIC) {
      // Hook menu works through the cdn
      $async = variable_get('advagg_async_generation', -1);
      if ($async == -1) {
        variable_set('advagg_async_generation', TRUE);
        $ret['advagg_async_generation'] = array(
          'title'       => $t('Adv CSS/JS Agg - Asynchronous Mode'),
          'severity'    => REQUIREMENT_OK,
          'value'       => $t('Is now set to TRUE'),
        );
      }
      if ($async == 0) {
        $ret['advagg_async_generation'] = array(
          'title'       => $t('Adv CSS/JS Agg - Asynchronous Mode'),
          'severity'    => REQUIREMENT_WARNING,
          'value'       => $t('Could be changed to TRUE'),
        );
      }
      if ($async == 1) {
        $ret['advagg_async_generation'] = array(
          'title'       => $t('Adv CSS/JS Agg - Asynchronous Mode'),
          'severity'    => REQUIREMENT_OK,
          'value'       => $t('Already set to TRUE'),
        );
      }
    }
    elseif ($data_local->code == 404 && !empty($data_local->headers['X-AdvAgg'])) {
      variable_set('advagg_async_generation', FALSE);
      $ret['advagg_async_generation'] = array(
        'title'       => $t('Adv CSS/JS Agg - Asynchronous Mode'),
        'severity'    => REQUIREMENT_WARNING,
        'value'       => $t('Set to FALSE. Check your CDN settings; request is not coming back.'),
      );
    }
    else {
      variable_set('advagg_async_generation', FALSE);
      $ret['advagg_async_generation'] = array(
        'title'       => $t('Adv CSS/JS Agg - Asynchronous Mode'),
        'severity'    => REQUIREMENT_ERROR,
        'value'       => $t('Set to FALSE. Check to see if you have fast 404s, if so create an exception for this module.'),
      );
    }
  }
  elseif ($data_local->code == 404 && !empty($data_local->headers['X-AdvAgg'])) {
    // Hook menu works.
    $async = variable_get('advagg_async_generation', -1);
    if ($async == -1) {
      variable_set('advagg_async_generation', TRUE);
      $ret['advagg_async_generation'] = array(
        'title'       => $t('Adv CSS/JS Agg - Asynchronous Mode'),
        'severity'    => REQUIREMENT_OK,
        'value'       => $t('Is now set to TRUE'),
      );
    }
    if ($async == 0) {
      $ret['advagg_async_generation'] = array(
        'title'       => $t('Adv CSS/JS Agg - Asynchronous Mode'),
        'severity'    => REQUIREMENT_WARNING,
        'value'       => $t('Could be changed to TRUE'),
      );
    }
    if ($async == 1) {
      $ret['advagg_async_generation'] = array(
        'title'       => $t('Adv CSS/JS Agg - Asynchronous Mode'),
        'severity'    => REQUIREMENT_OK,
        'value'       => $t('Already set to TRUE'),
      );
    }
  }
  else {
    variable_set('advagg_async_generation', FALSE);
    $ret['advagg_async_generation'] = array(
      'title'       => $t('Adv CSS/JS Agg - Asynchronous Mode'),
      'severity'    => REQUIREMENT_ERROR,
      'value'       => $t('Set to FALSE. Check to see if you have fast 404s, if so create an exception for this module.'),
    );
  }

  // Set socket timeout.
  if ($time_local['time'] > 950) {
    $new_time = ceil(($time['time']+51)/1000);
    $timeout = variable_get('advagg_socket_timeout', -1);
    if ($timeout == -1 || $timeout != $new_time) {
      $ret['advagg_socket_timeout'] = array(
        'title'       => $t('Adv CSS/JS Agg - Socket Timeout'),
        'severity'    => REQUIREMENT_OK,
        'value'       => $t('Set to %time seconds. Raw timer: %raw', array('%time' => $new_time, '%raw' => $time['time'])),
      );
    }
    else {
      variable_set('advagg_socket_timeout', $new_time);
      $ret['advagg_socket_timeout'] = array(
        'title'       => $t('Adv CSS/JS Agg - Socket Timeout'),
        'severity'    => REQUIREMENT_OK,
        'value'       => $t('Already set to %time seconds. Raw timer: %raw', array('%time' => $new_time, '%raw' => $time['time'])),
      );
    }
  }

  return $ret;
}


/**
 * Implementation of hook_schema.
 */
function advagg_schema() {
  $schema['cache_advagg'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_advagg']['description'] = t('Cache table for Advanced CSS/JS Aggregation. Used to keep timestamps and if the file exists.');

  $schema['advagg_files'] = array(
    'description' => t('Files used in CSS/JS aggregation.'),
    'fields' => array(
      'filename' => array(
        'description' => 'Path of the file relative to Drupal webroot.',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'filename_md5' => array(
        'description' => 'MD5 hash of filename',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'checksum' => array(
        'description' => 'mtime or md5 of the files content.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'filetype' => array(
        'description' => 'Filetype.',
        'type' => 'varchar',
        'length' => 8,
        'not null' => TRUE,
        'default' => '',
      ),
      'counter' => array(
        'description' => 'This is incremented every time a file changes.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'description' => 'Extra data about this file. Example would be what compressors work with it.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
    ),
    'indexes' => array(
      'checksum' => array('checksum'),
      'filetype' => array('filetype'),
    ),
    'primary key' => array('filename_md5'),
  );

  $schema['advagg_bundles'] = array(
    'description' => t('What files are used in what bundles.'),
    'fields' => array(
      'bundle_md5' => array(
        'description' => 'MD5 hash of the bundles list of files',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'filename_md5' => array(
        'description' => 'MD5 hash of filename source',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'counter' => array(
        'description' => 'This is incremented every time a file in the bundle changes.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'porder' => array(
        'description' => 'Processing order.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('bundle_md5', 'filename_md5'),

  );

  return $schema;
}

/**
 * Update 6100 - Add new column to table.
 */
function advagg_update_6100() {
  $ret = array();

  // Add in data column
  db_add_field($ret, 'advagg_files', 'data', array(
        'description' => 'Extra data about this file. Example would be what compressors work with it.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ));

  return $ret;
}

